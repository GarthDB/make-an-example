/**
 * Public: parses the `toString` result of a function to get argument names.
 *
 * * `func` {Function} that will be parsed for argument names.
 *
 * Returns {Array} of argument name {Strings}
 */
export function getArgsNames(func) {
  // First match everything inside the function argument parens.
  const args = func.toString().match(/function\s.*?\(([^)]*)\)/)[1];
  // Split the arguments string into an array comma delimited.
  return args.split(',').map(arg => arg.replace(/\/\*.*\*\//, '').trim()).filter(arg => arg);
}
/**
 * Public: matches argument names and argument values into an {Object}.
 *
 * * `argNames` {Array} of argument name {Strings}
 * * `argValues` {Array} of arguement values (can be anything)
 *
 * Returns {Object} with argument names as keys and argument values as values.
 * Extra arguments are returned as an array on the `extraArgs` property.
 */
export function generateArgsObj(argNames, argValues) {
  const result = { args: {} };
  const extraArgs = [];
  argValues.forEach((argValue, index) => {
    if (argNames[index]) {
      result.args[argNames[index]] = argValues[index];
    } else {
      extraArgs.push(argValue);
    }
  });
  if (extraArgs.length) {
    result.extraArgs = extraArgs;
  }
  return result;
}
/**
 * Public: generates function object by adding the function name to an `argsObj`.
 *
 * * `functionName` {String} name of the function
 * * `argsObj` Arguments {Object} generated by `generateArgsObj()`
 *
 * Returns Function {Object}
 */
export function generateFunctionObj(functionName, argsObj) {
  return Object.assign({ name: functionName }, argsObj);
}
/**
 * Public: passes function name, argument names and values (including extra arguemnts)
 * to logFunction (defaults to console.log).
 *
 * * `funcObject` Function {Object} returned by `generateFunctionObj()`.
 * * `logFunction` {Function} to pass log messages to. Defaults to `console.log`;
 *
 * Does not return a value.
 */
export function formatExample(funcObject, logFunction) {
  logFunction('---');
  logFunction(funcObject.name);
  for (const [name, value] of funcObject.args) {
    logFunction(`${name} argument:`);
    logFunction(value);
  }
  if ({}.hasOwnProperty.call(funcObject, 'extraArgs')) {
    funcObject.extraArgs.forEach((extraArg, index) => {
      logFunction(`Extra Argument [${index}]:`);
      logFunction(extraArg);
    });
  }
}
/**
 * Public: MakeAnExample class constructor that logs function data
 *
 * * `args` arguments {Object} of a function.
 * * `formatFunction` {Function} formats messages to `logFunction`
 * * `logFunction` log messages with be passed to this {logFunction};
 *
 * Does not return a value, but passes messages to `logFunction`.
 */
export default function MakeAnExample(
  // eslint-disable-next-line no-console
  args, formatFunction = formatExample, logFunction = console.log
) {
  const argsArray = Array.prototype.slice.call(args);
  const argNames = getArgsNames(args.callee);
  const functionName = args.callee.name;
  const argsObj = generateArgsObj(argNames, argsArray);
  const funcObject = generateFunctionObj(functionName, argsObj);
  formatFunction(funcObject, logFunction);
}
